#!/bin/bash
# Description: plugin for iptables
# Dependencies: iptables, arptables (optional)

local OPT="$1"

flush()
{
	local TYPE="$1"
	for type in $TYPE; do

		if [[ $type == "DEFAULT" ]]; then

			iptables -F
			iptables -X
			iptables -t filter -F
			iptables -t filter -X
			iptables -t mangle -F
			iptables -t mangle -X
			iptables -t nat -F
			iptables -t nat -X
			iptables -t raw -F
			iptables -t raw -X

			if [ $(which arptables 2>/dev/null) ]; then
				arptables -F
				arptables -X
				arptables -t nat -F
				arptables -t nat -X
				arptables -t mangle -F
				arptables -t mangle -X

				arptables -P INPUT DROP
				arptables -P OUTPUT DROP
				arptables -P FORWARD DROP
			fi
		fi

		if [[ $type == "LOG" ]]; then

			for chain in $(iptables -nvL | grep -ai chain | cut -d " " -f2 | grep -ai log); do
				iptables -F "$chain"
				iptables -X "$chain"

			done
		fi
	done

	# Default Policies
	iptables -P INPUT DROP
	iptables -P OUTPUT DROP
	iptables -P FORWARD DROP

	#iptables -A OUTPUT -j OUT_DNSCRYPT_acl
	#iptables -A INPUT -j IN_DNSCRYPT_acl
}

prerouting_security()
{
	local wan="$1"

	# https://javapipe.com/iptables-ddos-protection
	### 1: Drop invalid packets ###
	iptables -t mangle -A PREROUTING -m conntrack --ctstate INVALID -j DROP

	### 2: Drop TCP packets that are new and are not SYN ###
	iptables -t mangle -A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

	### 3: Drop SYN packets with suspicious MSS value ###
	iptables -t mangle -A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

	### 4: Block packets with bogus TCP flags ###
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP
	iptables -t mangle -A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

	### 5: Block spoofed packets ###
	if [[ ! -z $wan ]]; then
		iptables -t mangle -A PREROUTING -i $wan -s 224.0.0.0/3 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 169.254.0.0/16 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 172.16.0.0/12 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 192.0.2.0/24 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 192.168.0.0/16 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 10.0.0.0/8 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 0.0.0.0/8 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 240.0.0.0/5 -j DROP
		iptables -t mangle -A PREROUTING -i $wan -s 127.0.0.0/8 -j DROP
	fi
	### 6: Drop ICMP (you usually don't need this protocol) ###
	iptables -t mangle -A PREROUTING -p icmp -j DROP

	### 7: Drop fragments in all chains ###
	iptables -t mangle -A PREROUTING -f -j DROP

	### 8: Limit connections per source ip ###
	iptables -A INPUT -p tcp -m connlimit --connlimit-above 111 -j REJECT --reject-with tcp-reset

	### 9: Limit RST packets ###
	iptables -A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
	iptables -A INPUT -p tcp --tcp-flags RST RST -j DROP

	### 10: Limit new TCP connections per second per source ip ###
	iptables -A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
	iptables -A INPUT -p tcp -m conntrack --ctstate NEW -j DROP

	### 11: Use SYNPROXY on all ports (disables connection limiting rule) ###
	#iptables -t raw -A PREROUTING -p tcp -m tcp --syn -j CT --notrack
	#iptables -A INPUT -p tcp -m tcp -m conntrack --ctstate INVALID,UNTRACKED -j SYNPROXY --sack-perm --timestamp --wscale 7 --mss 1460
	#iptables -A INPUT -m conntrack --ctstate INVALID -j DROP

	### Protection against port scanning ###
	if [[ ! $(iptables -nL "port-scanning" 2>/dev/null) ]]; then
		iptables -N port-scanning
		iptables -A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
		iptables -A port-scanning -j DROP
	fi

	#iptables -A OUTPUT -m tcp -p tcp --tcp-flags ALL ACK -j ACCEPT
}


port_knocking()
{
	local COMBO="$1"
	local dst_port=$2

	if [[ ! $(iptables -nL "KNOCKING_${dst_port}" 2>/dev/null) ]]; then
		iptables -N "KNOCKING_${dst_port}"
	fi
}

# Use only if diagnosing connection issues on the loopback interface!
default_lo()
{
	iptables -A INPUT  -i lo -s 127.0.0.1/8 -d 127.0.0.1/8 -j ACCEPT
	iptables -A OUTPUT -o lo -d 127.0.0.1/8 -s 127.0.0.1/8 -j ACCEPT
}

#acl_DNS()
#{
#	if [ ! -d $(dirname "$DNS_FILE") ]; then
#		mkdir -p $(dirname "$DNS_FILE"
#}

# This allows connections to servers from any interface
input()
{
	local iface="$1"
	local ip="$2"
	local port="$3"
	local protocol="$4"
	local IFS=' 	
'

	if [ ! -z "$5" ]; then
		local mac="-m mac --mac-source $5"
	fi

	for interface in $iface; do
		# interface to ip 'tagging', useful for vlans and/or multiple interfaces
		if [[ $ip == *':'* ]]; then
			local input_iface="${ip%%:*}"
			local input_ip="${ip#*:}"
		else
			local input_iface="$interface"
			local input_ip="$ip"
		fi

		if [[ $interface =~ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3} ]]; then
			local iface_ip="$interface"
			local interface="$input_iface"
		else
			local iface_ip="$(ip address show $interface | grep -oP '(?<=inet ).*(?=/)' | cut -d " " -f1)"
		fi

		if [[ $input_iface == $interface ]]; then

			iptables -A INPUT  -i $interface -p $protocol --dport $port -s $input_ip -d $iface_ip $mac -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
			iptables -A OUTPUT -o $interface -p $protocol --sport $port -d $input_ip -s $iface_ip -m state --state ESTABLISHED,RELATED -j ACCEPT
		fi
	done
}

# This allows the router to connect to other servers from any interface
output()
{
	local iface="$1"
	local ip="$2"
	local port="$3"
	local protocol="$4"
	local IFS=' 	
'

	if [ ! -z $5 ]; then
		local mac="-m mac --mac-source $5"
	fi

	for interface in $iface; do
		# interface to ip 'tagging', useful for vlans and/or multiple interfaces
		if [[ $ip == *':'* ]]; then
			local output_iface="${ip%%:*}"
			local output_ip="${ip#*:}"
		else
			local output_iface="$interface"
			local output_ip="$ip"
		fi


		if [[ $interface =~ [0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3} ]]; then
			local iface_ip=$interface
			local interface=$output_iface
		else
			local iface_ip="$(ip address show $interface | grep -oP '(?<=inet ).*(?=/)' | cut -d " " -f1)"
		fi


		if [[ $output_iface == $interface ]]; then

			iptables -A INPUT  -i $interface -p $protocol --sport $port -s $output_ip -d $iface_ip $mac -m state --state ESTABLISHED,RELATED -j ACCEPT
			iptables -A OUTPUT -o $interface -p $protocol --dport $port -d $output_ip -s $iface_ip -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT

		fi
	done
}

# This allows lan clients to use the internet
forward()
{
	local src_iface="$1"
	local src_ip="$2"
	local dst_iface="$3"
	local dst_ip="$4"
	local dst_port="$5"
	local protocol="$6"
	local IFS=' 	
'
	for interface in $src_iface; do
		# interface to ip 'tagging', useful for vlans and/or multiple interfaces
		if [[ $src_ip == *':'* ]]; then
			local src_iface_1="${ip%%:*}"
			local src_ip_1="${ip#*:}"
		else
			local src_iface_1="$interface"
			local src_ip_1="$src_ip"
		fi

		if [[ $src_iface_1 == $interface ]]; then
			iptables -A FORWARD -i $interface -p $protocol --dport $dst_port -s $src_ip_1 -d $dst_ip -j ACCEPT
			iptables -A FORWARD -i $dst_iface -p $protocol --sport $dst_port -d $src_ip_1 -s $dst_ip -j ACCEPT
			iptables -t nat -A POSTROUTING -o $dst_iface -j MASQUERADE
		fi
	done
}

# This allows which user and group can connect to what service
acl()
{
	local iface="$1"
	local ip="$2"
	local port="$3"
	local user_group="$4"
	local protocol="$5"
	local IFS=' 	
'
	for interface in $iface; do
		# interface to ip 'tagging', useful for vlans and/or multiple interfaces
		if [[ $ip == *':'* ]]; then
			local acl_iface="${ip%%:*}"
			local acl_ip="${ip#*:}"
		else
			local acl_iface="$interface"
			local acl_ip="$ip"
		fi

		if [[ $acl_iface == $interface ]]; then

			if [[ $interface == *':'* ]]; then
				local interface="${interface%%:*}"
				local iface_ip="${acl_iface#*:}"
			else
				local iface_ip="$(ip address show $interface | grep -oP '(?<=inet ).*(?=/)' | cut -d " " -f1)"
			fi

			# sed 's/\x0//g'
			local user="${user_group%%:*}"
			local group="${user_group#*:}"

			if [ ! -z $user ]; then
				local user="-m owner --uid-owner $user"
			fi

			if [ ! -z $group ]; then
				local group="-m owner --gid-owner $group"
			fi

			iptables -A OUTPUT -o $interface -p $protocol --dport $port -s $iface_ip -d $acl_ip $user $group -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
			iptables -A INPUT  -i $interface -p $protocol --sport $port -d $iface_ip -s $acl_ip -m state --state ESTABLISHED,RELATED -j ACCEPT
		fi
	done
}

### LO NOTES
### First a connection leaves // client:**** -> server:80			acl_LO_CLIENT()
### Then a connection is received // server:80 <- client:****			acl_LO_SERVER()
### Next server tries to connect back // server:80 -> client:****		acl_LO_SERVER()
### Finally client establishes the connection // client:**** <- server:80	acl_LO_CLIENT()


# For the time being, we need a special function for acl'ing loopback
acl_lo_client()
{
	local ip="$1"
	local port="$2"
	local user_group="$3"
	local protocol="$4"

	local user="${user_group%%:*}"
	local group="${user_group#*:}"

	if [ ! -z $user ]; then
		local user="-m owner --uid-owner $user"
	fi

	if [ ! -z $group ]; then
		local group="-m owner --gid-owner $group"
	fi

	iptables -A OUTPUT -o lo -p $protocol -s $ip -d $ip --dport $port $user $group -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A INPUT  -i lo -p $protocol -d $ip -s $ip --sport $port -m state --state ESTABLISHED,RELATED -j ACCEPT
}

# A server function to prevent reduntant rules
acl_lo_server()
{

	local ip="$1"
	local port="$2"
	local user_group="$3"
	local protocol="$4"

	local user="${user_group%%:*}"
	local group="${user_group#*:}"

	if [ ! -z $user ]; then
		local user="-m owner --uid-owner $user"
	fi

	if [ ! -z $group ]; then
		local group="-m owner --gid-owner $group"
	fi

	iptables -A INPUT  -i lo -p $protocol -d $ip -s $ip --dport $port -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	iptables -A OUTPUT -o lo -p $protocol -s $ip -d $ip --sport $port $user $group -m state --state ESTABLISHED,RELATED -j ACCEPT
}

acl_lo()
{
	acl_lo_client "$1" "$2" "$3" "$4"
	acl_lo_server "$1" "$2" "$3" "$4"
}

SAVE()
{
	# Sysvinit/systemd
	[[ $(which service 2>/dev/null) ]] && service iptables restart || \
	# openrc
	[[ $(which rc-service 2>/dev/null) ]] && rc-service iptables restart
}
